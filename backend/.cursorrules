# PIP AI Backend - Cursor Rules for backend/
# FastAPI + Python 3.13 + Async Architecture + Multi-Agent System

## Backend Architecture
This is the PIP AI backend built with:
- **FastAPI** with async/await patterns
- **Python 3.13** with strict type hints
- **Pydantic** for data validation and serialization
- **Supabase** for database operations
- **WebSocket** for real-time communication
- **Multi-Agent System** with 7 specialized AI agents
- **OpenAI Integration** with GPT-4o/o1/o3 models
- **Smartsheet API** for external data integration

## Import Patterns
Always use absolute imports:
```python
# ✅ Correct
from backend.app.models import AppState
from backend.agents.manager_agent import ManagerAgent
from backend.services.gpt_handler import run_llm

# ❌ Incorrect
from ..app.models import AppState
from .manager_agent import ManagerAgent
```

## Project Structure
```
backend/
├── app/                    # Application core
│   ├── main.py            # FastAPI application entry
│   ├── models.py          # Legacy models (being phased out)
│   └── schemas.py         # Pydantic schemas (current)
├── agents/                # 7 AI Agents
│   ├── manager_agent.py   # Orchestration agent
│   ├── file_reader_agent.py
│   ├── trade_mapper_agent.py
│   ├── scope_agent.py
│   ├── takeoff_agent.py
│   ├── estimator_agent.py
│   └── smartsheet_agent.py
├── routes/                # API endpoints
│   ├── chat.py           # Chat + WebSocket endpoints
│   ├── files.py          # File upload/management
│   ├── smartsheet.py     # Smartsheet integration
│   └── api.py            # General API endpoints
├── services/             # Business logic services
│   ├── agent_router.py   # Routes messages to agents
│   ├── gpt_handler.py    # OpenAI API integration
│   ├── intent_classifier.py
│   └── route_planner.py
└── tests/               # Test suites
```

## FastAPI Patterns
Follow these patterns for API endpoints:
```python
from fastapi import APIRouter, HTTPException, Depends
from pydantic import BaseModel
from typing import Optional, List, Dict, Any

router = APIRouter()

class RequestModel(BaseModel):
    field: str
    optional_field: Optional[int] = None

@router.post("/endpoint", response_model=ResponseModel)
async def endpoint_function(
    request: RequestModel,
    dependency: str = Depends(get_dependency)
) -> ResponseModel:
    """Clear docstring describing the endpoint."""
    try:
        # Implementation
        result = await async_operation()
        return ResponseModel(data=result)
    except Exception as e:
        logger.error(f"Error in endpoint: {e}")
        raise HTTPException(status_code=500, detail=str(e))
```

## Agent Architecture Patterns
All agents follow the BaseAgent pattern:
```python
from backend.app.schemas import AppState
from backend.services.base_agent import BaseAgent
from typing import Dict, Any, Optional
import logging

logger = logging.getLogger(__name__)

class ExampleAgent(BaseAgent):
    """Agent description and purpose."""
    
    async def process(self, state: AppState) -> AppState:
        """Process the app state and return updated state."""
        try:
            # Validate required inputs
            if not self._validate_inputs(state):
                state.error = "Required inputs missing"
                return state
            
            # Agent-specific processing
            result = await self._perform_work(state)
            
            # Update state with results
            state.status = "completed"
            state.agent_trace.append({
                "agent": "ExampleAgent",
                "decision": f"Processed with result: {result}",
                "timestamp": datetime.now(timezone.utc)
            })
            
            return state
            
        except Exception as e:
            logger.error(f"ExampleAgent error: {e}")
            state.error = f"ExampleAgent failed: {str(e)}"
            return state
    
    def _validate_inputs(self, state: AppState) -> bool:
        """Validate required inputs for this agent."""
        return True  # Implement validation logic
    
    async def _perform_work(self, state: AppState) -> Any:
        """Perform the actual agent work."""
        # Implementation
        pass
```

## Async/Await Patterns
Always use async/await for I/O operations:
```python
# ✅ Correct async patterns
async def process_file(file_path: str) -> Dict[str, Any]:
    async with aiofiles.open(file_path, 'rb') as f:
        content = await f.read()
    
    result = await external_api_call(content)
    return result

# Database operations
async def get_data(id: str) -> Optional[Dict[str, Any]]:
    async with get_db_connection() as conn:
        result = await conn.fetch_one("SELECT * FROM table WHERE id = $1", id)
    return result

# LLM calls
async def call_llm(prompt: str) -> str:
    response = await run_llm(
        messages=[{"role": "user", "content": prompt}],
        model="gpt-4o-mini",
        max_tokens=500
    )
    return response
```

## Error Handling Patterns
Implement comprehensive error handling:
```python
import logging
from typing import Optional

logger = logging.getLogger(__name__)

async def robust_function(param: str) -> Optional[Dict[str, Any]]:
    """Function with proper error handling."""
    try:
        # Main logic
        result = await risky_operation(param)
        return result
        
    except SpecificException as e:
        logger.warning(f"Expected error in robust_function: {e}")
        return None
        
    except Exception as e:
        logger.error(f"Unexpected error in robust_function: {e}")
        raise HTTPException(status_code=500, detail=f"Internal error: {str(e)}")
```

## WebSocket Patterns
Follow established WebSocket message schemas:
```python
from backend.routes.chat import broadcast_message
from datetime import datetime, timezone

async def send_agent_update(session_id: str, agent_name: str, message: str):
    """Send real-time agent update via WebSocket."""
    await broadcast_message(session_id, {
        "type": "agent_substep",
        "session_id": session_id,
        "timestamp": datetime.now(timezone.utc).isoformat(),
        "data": {
            "agent_name": agent_name,
            "message": message,
            "progress": 50
        }
    })
```

## Database Integration
Use proper database patterns:
```python
from backend.services.supabase_client import get_supabase_client
from typing import Dict, Any, List, Optional

async def save_to_database(data: Dict[str, Any]) -> str:
    """Save data to database with proper error handling."""
    try:
        supabase = get_supabase_client()
        
        result = supabase.table("table_name").insert(data).execute()
        
        if result.data:
            return result.data[0]["id"]
        else:
            raise Exception("Failed to save to database")
            
    except Exception as e:
        logger.error(f"Database save error: {e}")
        raise
```

## Type Hints and Validation
Use strict type hints everywhere:
```python
from typing import Dict, Any, List, Optional, Union
from pydantic import BaseModel, Field
from datetime import datetime

class StrictModel(BaseModel):
    required_field: str = Field(..., description="Required string field")
    optional_field: Optional[int] = Field(None, description="Optional integer")
    list_field: List[str] = Field(default_factory=list)
    metadata: Dict[str, Any] = Field(default_factory=dict)
    
    class Config:
        validate_assignment = True
        use_enum_values = True

# Function signatures
async def typed_function(
    param1: str,
    param2: Optional[int] = None,
    param3: List[Dict[str, Any]] = None
) -> Dict[str, Union[str, int, bool]]:
    """Function with comprehensive type hints."""
    pass
```

## Logging Patterns
Use structured logging:
```python
import logging
from datetime import datetime

logger = logging.getLogger(__name__)

def log_agent_activity(agent_name: str, action: str, details: Dict[str, Any]):
    """Structured logging for agent activities."""
    logger.info(
        f"Agent Activity",
        extra={
            "agent": agent_name,
            "action": action,
            "details": details,
            "timestamp": datetime.now().isoformat()
        }
    )
```

## File Processing Patterns
Handle file operations safely:
```python
import aiofiles
from pathlib import Path
from typing import Optional, Dict, Any

async def process_uploaded_file(
    file_content: bytes,
    filename: str,
    content_type: str
) -> Optional[Dict[str, Any]]:
    """Process uploaded file with proper validation."""
    try:
        # Validate file
        if not filename or len(file_content) == 0:
            raise ValueError("Invalid file data")
        
        # Process based on type
        if content_type.startswith("image/"):
            result = await process_image(file_content)
        elif content_type == "application/pdf":
            result = await process_pdf(file_content)
        else:
            result = await process_text_file(file_content)
        
        return {
            "filename": filename,
            "size": len(file_content),
            "content_type": content_type,
            "processed_data": result
        }
        
    except Exception as e:
        logger.error(f"File processing error for {filename}: {e}")
        return None
```

## Testing Patterns
Write comprehensive tests:
```python
import pytest
from unittest.mock import AsyncMock, patch
from backend.agents.example_agent import ExampleAgent
from backend.app.schemas import AppState

@pytest.mark.asyncio
async def test_example_agent_success():
    """Test successful agent processing."""
    # Arrange
    agent = ExampleAgent()
    state = AppState(query="test query")
    
    # Act
    result = await agent.process(state)
    
    # Assert
    assert result.status == "completed"
    assert result.error is None
    assert len(result.agent_trace) > 0

@pytest.mark.asyncio
async def test_example_agent_with_mocked_external_call():
    """Test agent with mocked external dependencies."""
    with patch('backend.services.gpt_handler.run_llm') as mock_llm:
        mock_llm.return_value = "mocked response"
        
        agent = ExampleAgent()
        state = AppState(query="test")
        
        result = await agent.process(state)
        
        assert result.status == "completed"
        mock_llm.assert_called_once()
```

## Performance Considerations
- Use async/await for all I/O operations
- Implement proper connection pooling
- Cache frequently accessed data
- Use background tasks for heavy operations
- Monitor memory usage with large files
- Implement request timeouts

## Security Best Practices
- Validate all inputs with Pydantic models
- Sanitize file uploads
- Use proper authentication headers
- Implement rate limiting
- Log security events
- Never expose internal errors to clients

Remember: This backend serves a real-time frontend with WebSocket communication. Always consider the full-stack implications and maintain proper async patterns throughout. 